{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      \"Content-Type\": \"aplication/json\"\n    };\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"wBqGcGl6EafFNGt940fH8x5vtvA=\");","map":{"version":3,"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","ok","Error","status","data","json","e","message","clearError"],"sources":["/Users/bilous/Projects/umka/marvel_starter/src/hooks/http.hook.js"],"sourcesContent":["import {useState, useCallback} from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = {\"Content-Type\": \"aplication/json\"}) => {\n        setLoading(true);\n        try {\n            const response = await fetch(url, {method, body, headers});\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n            const data = await response.json();\n            setLoading(false);\n            return data;\n        } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, []);\n    const clearError = useCallback(() => setError(null), [])\n\n    return {loading, request, error, clearError}\n};"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;EAAA;;EACzB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;EAEA,MAAMO,OAAO,GAAGN,WAAW,CAAC,gBAAOO,GAAP,EAA2F;IAAA,IAA/EC,MAA+E,uEAAtE,KAAsE;IAAA,IAA/DC,IAA+D,uEAAxD,IAAwD;IAAA,IAAlDC,OAAkD,uEAAxC;MAAC,gBAAgB;IAAjB,CAAwC;IACnHP,UAAU,CAAC,IAAD,CAAV;;IACA,IAAI;MACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;QAACC,MAAD;QAASC,IAAT;QAAeC;MAAf,CAAN,CAA5B;;MACA,IAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;QACd,MAAM,IAAIC,KAAJ,CAAW,mBAAkBP,GAAI,aAAYI,QAAQ,CAACI,MAAO,EAA7D,CAAN;MACH;;MACD,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;MACAd,UAAU,CAAC,KAAD,CAAV;MACA,OAAOa,IAAP;IACH,CARD,CAQE,OAAOE,CAAP,EAAU;MACRf,UAAU,CAAC,KAAD,CAAV;MACAE,QAAQ,CAACa,CAAC,CAACC,OAAH,CAAR;MACA,MAAMD,CAAN;IACH;EACJ,CAf0B,EAexB,EAfwB,CAA3B;EAgBA,MAAME,UAAU,GAAGpB,WAAW,CAAC,MAAMK,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;EAEA,OAAO;IAACH,OAAD;IAAUI,OAAV;IAAmBF,KAAnB;IAA0BgB;EAA1B,CAAP;AACH,CAvBM;;GAAMnB,O"},"metadata":{},"sourceType":"module"}