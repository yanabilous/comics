{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useHttp } from \"../hooks/http.hook\";\n\nconst useComicsService = () => {\n  _s();\n\n  const {\n    loading,\n    request,\n    error,\n    clearError\n  } = useHttp();\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=26bf773b3288c2d35df092385ce05b83\";\n  const _baseOffset = 522;\n\n  const getAllComics = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _baseOffset;\n    const res = await request(`${_apiBase}comics?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComics = async id => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey} `);\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || 'There is no description',\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      language: comics.textObjects.language || 'en-us',\n      // price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n      prices: comics.prices\n    };\n  }; // const _transformComics = (comic) => {\n  //     return {\n  //         id: comic.id,\n  //         items: comic.items,\n  //         title: comic.title,\n  //         issueNumber: comic.issueNumber,\n  //         thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\n  //         prices: comic.prices\n  //     };\n  //\n  // };\n\n\n  return {\n    loading,\n    error,\n    getAllComics,\n    getComics,\n    clearError\n  };\n};\n\n_s(useComicsService, \"9hyEhuOfcolEaHPbDIyQe2OeeLY=\", false, function () {\n  return [useHttp];\n});\n\nexport default useComicsService;","map":{"version":3,"names":["useHttp","useComicsService","loading","request","error","clearError","_apiBase","_apiKey","_baseOffset","getAllComics","offset","res","data","results","map","_transformComics","getComics","id","comics","title","description","pageCount","thumbnail","path","extension","language","textObjects","prices"],"sources":["/Users/bilous/Projects/umka/marvel_starter/src/services/ComicsService.js"],"sourcesContent":["import {useHttp} from \"../hooks/http.hook\";\n\n\nconst useComicsService = () => {\n    const {loading, request, error, clearError} = useHttp();\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n    const _apiKey = \"apikey=26bf773b3288c2d35df092385ce05b83\";\n    const _baseOffset = 522;\n\n\n\n\n\n    const getAllComics= async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComics = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey} `);\n        return _transformComics(res.data.results[0]);\n    };\n     const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            // price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n            prices: comics.prices\n\n        }\n    }\n\n    // const _transformComics = (comic) => {\n    //     return {\n    //         id: comic.id,\n    //         items: comic.items,\n    //         title: comic.title,\n    //         issueNumber: comic.issueNumber,\n    //         thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\n    //         prices: comic.prices\n    //     };\n    //\n    // };\n    return {loading, error, getAllComics, getComics, clearError};\n}\n\n\n\nexport default useComicsService;"],"mappings":";;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;;AAGA,MAAMC,gBAAgB,GAAG,MAAM;EAAA;;EAC3B,MAAM;IAACC,OAAD;IAAUC,OAAV;IAAmBC,KAAnB;IAA0BC;EAA1B,IAAwCL,OAAO,EAArD;EACA,MAAMM,QAAQ,GAAG,2CAAjB;EACA,MAAMC,OAAO,GAAG,yCAAhB;EACA,MAAMC,WAAW,GAAG,GAApB;;EAMA,MAAMC,YAAY,GAAE,kBAAgC;IAAA,IAAzBC,MAAyB,uEAAhBF,WAAgB;IAChD,MAAMG,GAAG,GAAG,MAAMR,OAAO,CAAE,GAAEG,QAAS,yBAAwBI,MAAO,IAAGH,OAAQ,EAAvD,CAAzB;IACA,OAAOI,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiBC,GAAjB,CAAqBC,gBAArB,CAAP;EACH,CAHD;;EAKA,MAAMC,SAAS,GAAG,MAAOC,EAAP,IAAc;IAC5B,MAAMN,GAAG,GAAG,MAAMR,OAAO,CAAE,GAAEG,QAAS,UAASW,EAAG,IAAGV,OAAQ,GAApC,CAAzB;IACA,OAAOQ,gBAAgB,CAACJ,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiB,CAAjB,CAAD,CAAvB;EACH,CAHD;;EAIC,MAAME,gBAAgB,GAAIG,MAAD,IAAY;IAClC,OAAO;MACHD,EAAE,EAAEC,MAAM,CAACD,EADR;MAEHE,KAAK,EAAED,MAAM,CAACC,KAFX;MAGHC,WAAW,EAAEF,MAAM,CAACE,WAAP,IAAsB,yBAHhC;MAIHC,SAAS,EAAEH,MAAM,CAACG,SAAP,GAAoB,GAAEH,MAAM,CAACG,SAAU,KAAvC,GAA8C,0CAJtD;MAKHC,SAAS,EAAEJ,MAAM,CAACI,SAAP,CAAiBC,IAAjB,GAAwB,GAAxB,GAA8BL,MAAM,CAACI,SAAP,CAAiBE,SALvD;MAMHC,QAAQ,EAAEP,MAAM,CAACQ,WAAP,CAAmBD,QAAnB,IAA+B,OANtC;MAOH;MACAE,MAAM,EAAET,MAAM,CAACS;IARZ,CAAP;EAWH,CAZA,CAnB0B,CAiC3B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,OAAO;IAACzB,OAAD;IAAUE,KAAV;IAAiBK,YAAjB;IAA+BO,SAA/B;IAA0CX;EAA1C,CAAP;AACH,CA7CD;;GAAMJ,gB;UAC4CD,O;;;AAgDlD,eAAeC,gBAAf"},"metadata":{},"sourceType":"module"}